{"version":3,"sources":["use-listener.ts","App.tsx","serviceWorker.ts","update-vh.ts","index.tsx"],"names":["useWindowListener","type","listener","React","window","addEventListener","removeEventListener","DARK_MODE","matchMedia","matches","App","outerRef","innerRef","content","setContent","darkMode","setDarkMode","error","setError","zoom","val","inner","current","style","transform","updateZoom","outer","zoomRatioWidth","offsetWidth","zoomRatioHeight","offsetHeight","zoomRatioMin","Math","min","updateZoomWithDelay","setTimeout","handleChangeDarkMode","e","checked","currentTarget","handleChangeContent","value","handleSubmitForm","a","preventDefault","requestFullscreen","navigationUI","message","document","fullscreenElement","classList","add","remove","body","toggle","className","onSubmit","href","htmlFor","id","onChange","title","classNames","ref","Boolean","location","hostname","match","updateVH","documentElement","setProperty","innerHeight","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.0f16e314.chunk.js","sourcesContent":["import * as React from 'react';\r\n\r\nexport function useDocumentListener <K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any) {\r\n  React.useEffect(() => {\r\n    document.addEventListener(type, listener);\r\n    return () => document.removeEventListener(type, listener);\r\n  });\r\n}\r\n\r\nexport function useWindowListener <K extends keyof WindowEventMap>(type: K, listener: (this: Window, ev: WindowEventMap[K]) => any) {\r\n  React.useEffect(() => {\r\n    window.addEventListener(type, listener);\r\n    return () => window.removeEventListener(type, listener);\r\n  });\r\n}\r\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport { useWindowListener, useDocumentListener } from './use-listener';\n\nconst DARK_MODE = window.matchMedia('(prefers-color-scheme: dark)').matches;\n\nconst App: React.FC = () => {\n  const outerRef = React.useRef<HTMLDivElement>(null);\n  const innerRef = React.useRef<HTMLDivElement>(null);\n\n  const [content, setContent] = React.useState('Edit me');\n  const [darkMode, setDarkMode] = React.useState(DARK_MODE);\n  const [error, setError] = React.useState<null | string>(null);\n\n  const zoom = React.useCallback((val: number) => {\n    const inner = innerRef.current;\n    if (!inner) return;\n    inner.style.transform = `scale(${val})`;\n  }, []);\n\n  const updateZoom = React.useCallback(() => {\n    const outer = outerRef.current;\n    const inner = innerRef.current;\n    if (!outer || !inner) {\n      zoom(1);\n      return;\n    }\n    const zoomRatioWidth = outer.offsetWidth / inner.offsetWidth;\n    const zoomRatioHeight = outer.offsetHeight / inner.offsetHeight;\n    const zoomRatioMin = Math.min(zoomRatioWidth, zoomRatioHeight);\n    zoom(zoomRatioMin);\n  }, [zoom]);\n\n  const updateZoomWithDelay = React.useCallback(() => {\n    // Update immediately\n    updateZoom();\n    // Wait some time and do it again just in case\n    setTimeout(updateZoom, 100);\n  }, [updateZoom]);\n\n  const handleChangeDarkMode = React.useCallback<React.ChangeEventHandler<HTMLInputElement>>((e) => {\n    const { checked } = e.currentTarget;\n    setDarkMode(checked);\n  }, []);\n\n  const handleChangeContent = React.useCallback<React.ChangeEventHandler<HTMLTextAreaElement>>((e) => {\n    setContent(e.currentTarget.value);\n  }, []);\n\n  const handleSubmitForm = React.useCallback<React.ReactEventHandler>(async (e) => {\n    e.preventDefault();\n    const outer = outerRef.current;\n    if (!outer) return;\n    try {\n      await outer.requestFullscreen({ navigationUI: 'hide' });\n    } catch (err) {\n      setError(err.message);\n    }\n  }, []);\n\n  useWindowListener('orientationchange', updateZoomWithDelay);\n  useWindowListener('resize', updateZoomWithDelay);\n\n  useDocumentListener('fullscreenchange', () => {\n    const outer = outerRef.current;\n    if (!outer) return;\n    if (document.fullscreenElement === outer) {\n      outer.classList.add('zoom');\n      updateZoom();\n    } else {\n      outer.classList.remove('zoom');\n    }\n  });\n\n  React.useEffect(() => {\n    document.body.classList.toggle('dark', darkMode);\n  }, [darkMode]);\n\n  return (\n    <>\n      <form className=\"App container d-flex flex-column py-5\" onSubmit={handleSubmitForm}>\n        <div>\n          <a href=\"https://skeoh.com/\" className=\"text-secondary\">&larr; skeoh.com</a>\n          <h1 className=\"mb-2\">Embiggen</h1>\n        </div>\n\n        <div className=\"d-flex flex-column flex-fill form-group my-2\">\n          <label htmlFor=\"App-content\" className=\"sr-only\">Content</label><br />\n          <textarea id=\"App-content\" className=\"form-control flex-fill\" value={content} onChange={handleChangeContent} />\n        </div>\n\n        <div className=\"my-2\">\n          <div className=\"form-check\">\n            <input\n              id=\"App-dark-mode\"\n              className=\"form-check-input\"\n              type=\"checkbox\"\n              value=\"dark\"\n              checked={darkMode}\n              onChange={handleChangeDarkMode}\n            />\n            <label htmlFor=\"App-dark-mode\" className=\"form-check-label\">Dark mode</label>\n          </div>\n        </div>\n\n        <button\n          type=\"submit\"\n          title={error || ''}\n          className={classNames('btn btn-block my-2', error ? 'btn-danger' : 'btn-primary')}\n        >\n          Embiggen\n        </button>\n      </form>\n\n      <div ref={outerRef} className=\"App-output-outer d-flex align-items-center justify-content-center\">\n        <div ref={innerRef} className=\"App-output-inner\">\n          {content}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/** See https://css-tricks.com/the-trick-to-viewport-units-on-mobile/ */\r\nexport const updateVH = () => document.documentElement.style.setProperty('--vh', window.innerHeight * 0.01 + 'px');\r\nwindow.addEventListener('resize', updateVH);\r\nupdateVH();\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './update-vh';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}